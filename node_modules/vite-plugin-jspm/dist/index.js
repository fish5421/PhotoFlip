import path from 'path';
import { Generator, fetch } from '@jspm/generator';

const getDefaultOptions = () => ({
  defaultProvider: "jspm",
  debug: false,
  env: ["browser", "module"]
});
const getLatestVersionOfShims = async () => {
  const version = await (await fetch(`https://ga.jspm.io/npm:es-module-shims`)).text();
  return version;
};
let generator;
async function plugin(pluginOptions) {
  var _a;
  const resolvedDeps = /* @__PURE__ */ new Set();
  const promises = [];
  let options = { ...getDefaultOptions(), ...pluginOptions || {} };
  options.env = (_a = options.env) == null ? void 0 : _a.filter(
    (envVar) => !["development", "production"].includes(envVar)
  );
  const log = (msg) => {
    if (!(options == null ? void 0 : options.debug)) {
      return;
    }
    console.log("[vite-plugin-jspm]:" + msg);
  };
  generator = new Generator(options);
  if (options == null ? void 0 : options.debug) {
    (async () => {
      for await (const { type, message } of generator.logStream()) {
        console.log(`${type}: ${message}`);
      }
    })();
  }
  if (options == null ? void 0 : options.inputMap) {
    await generator.reinstall();
  }
  return [
    {
      name: "jspm:imports-scan",
      enforce: "pre",
      config(_, _env) {
        var _a2;
        (_a2 = options.env) == null ? void 0 : _a2.push(_env.mode);
      },
      configResolved(config) {
        config.build.modulePreload = false;
        config.plugins.push({
          name: "vite-plugin-ignore-static-import-replace-idprefix",
          transform: (code, _, ctx) => {
            if (ctx == null ? void 0 : ctx.ssr) {
              return code;
            }
            const VALID_ID_PREFIX = `/@id/`;
            const resolvedDepsRegex = new RegExp(
              `${VALID_ID_PREFIX}(${[...resolvedDeps].join("|")})`,
              "g"
            );
            return resolvedDepsRegex.test(code) ? code.replace(resolvedDepsRegex, (_2, s1) => s1) : code;
          }
        });
      },
      async resolveId(id, importer, ctx) {
        if (ctx.ssr) {
          return null;
        }
        if (id.startsWith("/") || id.startsWith(".") || id.startsWith("vite/") || id.startsWith("__vite") || id.includes(".css") || id.includes(".html") || path.isAbsolute(id) || resolvedDeps.has(id) || (importer == null ? void 0 : importer.startsWith("http"))) {
          return;
        }
        try {
          log(`jspm:imports-scan: Resolving ${id}`);
          generator.resolve(id);
        } catch {
          log(`jspm:imports-scan: Installing ${id}`);
          promises.push(generator.install(id));
        } finally {
          resolvedDeps.add(id);
        }
        return;
      }
    },
    {
      name: "jspm:import-mapping",
      enforce: "post",
      async resolveId(id, importer, ctx) {
        try {
          await Promise.allSettled(promises);
          promises.length = 0;
        } catch {
        }
        if (ctx.ssr) {
          return null;
        }
        if (id.startsWith("vite/") || path.isAbsolute(id)) {
          return;
        }
        if ((importer == null ? void 0 : importer.startsWith("http")) && (id == null ? void 0 : id.startsWith("."))) {
          const proxyPath = new URL(id, importer).toString();
          if (options == null ? void 0 : options.downloadDeps) {
            return { id: proxyPath, external: false };
          }
          return { id, external: true };
        }
        try {
          log(`jspm:import-mapping: Resolving ${id}`);
          const proxyPath = generator.resolve(id);
          resolvedDeps.add(id);
          if (options == null ? void 0 : options.downloadDeps) {
            return { id: proxyPath, external: false };
          }
          return { id, external: true };
        } catch (e) {
          if (importer == null ? void 0 : importer.startsWith("http")) {
            log(`jspm:import-mapping: Resolving ${id} from ${importer}`);
            const proxyPath = generator.importMap.resolve(id, importer);
            resolvedDeps.add(id);
            if (options == null ? void 0 : options.downloadDeps) {
              return { id: proxyPath, external: false };
            }
            return { id, external: true };
          }
        }
        return { id, external: true };
      },
      async load(id) {
        if ((id == null ? void 0 : id.startsWith("vite/")) || !(id == null ? void 0 : id.startsWith("http"))) {
          return;
        }
        if (options == null ? void 0 : options.downloadDeps) {
          log(`jspm:import-mapping: Downloading ${id}`);
          const code = await (await fetch(id)).text();
          return code;
        }
        return;
      }
    },
    {
      name: "jspm:post",
      enforce: "post",
      transformIndexHtml: {
        enforce: "post",
        async transform(html) {
          resolvedDeps.clear();
          const esModuleShims = await getLatestVersionOfShims();
          const tags = [
            {
              tag: "script",
              attrs: {
                src: `https://ga.jspm.io/npm:es-module-shims@${esModuleShims}/dist/es-module-shims.js`,
                async: true
              },
              injectTo: "head-prepend"
            }
          ];
          if (!(options == null ? void 0 : options.downloadDeps)) {
            tags.push({
              tag: "script",
              attrs: {
                type: "importmap"
              },
              children: JSON.stringify(generator.getMap(), null, 2),
              injectTo: "head-prepend"
            });
          }
          return {
            html,
            tags
          };
        }
      }
    }
  ];
}

export { plugin as default, generator };
